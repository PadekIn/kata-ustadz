generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum MessageType {
  Promotion
  Notification
}

enum ContentType {
  Audio
  Video
  Pdf
}

enum Role {
  Admin
  User
}

enum WatchType {
  Content
  Module
}

enum OrderStatus {
  Issued
  Unpaid
  Cancelled
  Expired
}

enum OrderType {
  Content
  Packet
}

enum CommissionStatus {
  Pending
  Paid
}

enum PaymentStatus {
  Pending
  Settlement
  Capture
  Failed
  Expired
  Cancelled
}

model Account {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  role          Role      @default(User)
  otpCode       String?   @map("otp_code")
  otpExpiration DateTime? @map("otp_expiration")
  isVerified    Boolean   @default(false) @map("is_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  Admin            Admin?
  User             User?
  WaitingList      WaitingList?
  Notification     Notification[]
  Affiliate        Affiliate?
  Content          Content[]
  Order            Order[]
  PurchasedContent PurchasedContent[]
  WatchLater       WatchLater[]
  Like             Like[]
  Comment          Comment[]
  History          History[]
  Module           Module[]
  ModuleContent    ModuleContent[]

  @@map("accounts")
}

model Admin {
  id                Int       @id @default(autoincrement())
  accountId         Int       @unique @map("account_id")
  fullname          String    @map("fullname")
  gender            String
  phone             String    @unique @map("phone")
  birthDate         DateTime  @map("birthdate")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  Account          Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model User {
  id                Int       @id @default(autoincrement())
  accountId         Int       @unique @map("account_id")
  fullname          String    @map("fullname")
  gender            String
  birthDate         DateTime  @map("birth_date")
  phone             String    @unique @map("phone")
  city              String
  job               String?
  picture           String?
  subscriptionUntil DateTime? @map("subscription_until")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  Account          Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Ustadz {
  id                Int       @id @default(autoincrement())
  fullname          String    @map("fullname")
  gender            String
  phone             String?    @unique @map("phone")
  birthDate         DateTime  @map("birthdate")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("ustadz")
}

model WaitingList {
  id        Int      @id @default(autoincrement())
  accountId Int      @unique @map("account_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("waiting_lists")
}

model Affiliate {
  id           Int    @id @default(autoincrement())
  accountId    Int    @unique @map("account_id")
  referralCode String @unique @map("referral_code")
  totalEarning Float  @default(0) @map("total_earning")
  totalPayout  Float  @default(0) @map("total_payout")

  Account    Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Commission Commission[]
  Order      Order[]

  @@map("affiliates")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  ContentCategory ContentCategory[]

  @@map("categories")
}

model Content {
  id         Int         @id @default(autoincrement())
  type       ContentType @default(Video)
  ustadzId   Int      @map("ustadz_id")
  bunnyId    String      @unique @map("bunny_id")
  url        String      @unique
  price      Int
  isActive   Boolean     @default(true) @map("is_active")
  createBy   Int         @map("create_by")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  deletedAt  DateTime?   @map("deleted_at")

  Account          Account @relation(fields: [createBy], references: [id], onDelete: Cascade)

  ContentCategory  ContentCategory[]
  ModuleContent    ModuleContent[]
  Comment          Comment[]
  Like             Like[]
  History          History[]
  WatchLater       WatchLater[]
  PurchasedContent PurchasedContent[]
  Order            Order[]

  @@map("contents")
}

model ContentCategory {
  contentId  Int      @map("content_id")
  categoryId Int      @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  Content  Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  Category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([contentId, categoryId])
  @@map("list_contents")
}

model Module {
  id          Int       @id @default(autoincrement())
  name        String
  image       String
  description String
  isActive    Boolean   @default(true) @map("is_active")
  createBy    Int       @map("create_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  Account       Account @relation(fields: [createBy], references: [id], onDelete: Cascade)

  ModuleContent ModuleContent[]
  WatchLater    WatchLater[]

  @@map("modules")
}

model ModuleContent {
  moduleId  Int      @map("module_id")
  contentId Int      @map("content_id")
  index     Int
  createBy  Int      @map("create_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Module  Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  Content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  Account Account @relation(fields: [createBy], references: [id], onDelete: Cascade)

  @@id([moduleId, contentId])
  @@map("module_contents")
}

model History {
  id          Int       @id @default(autoincrement())
  accountId      Int       @map("account_id")
  contentId   Int       @map("content_id")
  currentTime DateTime? @map("current_time")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  Account Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("histories")
}

model WatchLater {
  id        Int       @id @default(autoincrement())
  accountId Int       @map("account_id")
  type      WatchType
  contentId Int?      @map("content_id")
  moduleId  Int?      @map("module_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  Account Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Content Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  Module  Module?  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("watch_laters")
}

model Like {
  id        Int      @id @default(autoincrement())
  accountId Int      @map("account_id")
  contentId Int      @map("content_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Account Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Comment {
  id        Int       @id @default(autoincrement())
  accountId Int       @map("account_id")
  contentId Int       @map("content_id")
  text      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PurchasedContent {
  id        Int      @id @default(autoincrement())
  accountId Int      @map("id_account")
  contentId Int      @map("id_content")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("purchased_contents")
}

model Packet {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  duration    Int
  price       Int
  discount    Float     @default(0)
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  Orders      Order[]   @relation("PacketOrders") // Tambahkan alias relasi agar lebih jelas

  @@map("packets")
}

model Order {
  id          Int         @id @default(autoincrement())
  type        OrderType   
  accountId   Int         @map("account_id")
  packetId    Int?        @map("packet_id")  // Paket bisa opsional
  contentId   Int?        @map("content_id")
  orderStatus OrderStatus @default(Unpaid) @map("order_status")
  activeUntil DateTime?   @map("active_until")
  detailPrice Json        @map("detail_price")
  affiliateId Int?        @map("affiliate_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  Account    Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Packet     Packet?      @relation(fields: [packetId], references: [id], onDelete: SetNull, name: "PacketOrders")
  Content    Content?     @relation(fields: [contentId], references: [id], onDelete: Cascade)
  Affiliate  Affiliate?   @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  Payment    Payment?
  Commission Commission[]

  @@map("orders")
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique @map("order_id")
  method        String
  amount        Float
  status        PaymentStatus @default(Pending) 
  payload       Json
  transactionId String   @map("transaction_id")
  fraudStatus   String   @map("fraud_status")
  validUntil    DateTime @map("valid_until")
  date          DateTime @map("payment_date")
  token         String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  Order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Commission {
  id          Int              @id @default(autoincrement())
  orderId     Int              @map("order_id")
  affiliateId Int              @map("affiliate_id")
  amount      Float            @default(0)
  status      CommissionStatus @default(Pending)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  Order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Affiliate Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@map("commissions")
}

model Notification {
  id        Int      @id @default(autoincrement())
  accountId Int      @map("account_id")
  type      String   @default("General")
  title     String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  isDeleted Boolean  @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
